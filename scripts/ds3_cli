#! /usr/bin/env python
import os
import os.path
import sys
import signal
import argparse

from ds3 import ds3

def signal_handler(signal, frame):
    print "Detected Ctrl-C, closing program."
    sys.exit(0)

def ensure_dir_exists(dir_name):
    if not os.path.exists(dir_name):
        os.makedirs(dir_name)

def place_file(file_name, file_data):
    dir_name = os.path.dirname(file_name)
    if dir_name != '':
        ensure_dir_exists(dir_name)
    output_file = open(file_name, 'w')
    output_file.write(file_data)
    output_file.close()

def file_list(directory):
    files = []
    for entry in os.listdir(directory):
        full_path = os.path.join(directory, entry)
        if os.path.isdir(full_path):
            files.append(file_list(full_path))
        elif os.path.isfile(full_path):
            files.append(ds3.ObjectData(full_path))
        else:
            print "Unkown type"
    return files

def bulk_put(client, bucket, directory):
    files = file_list(directory)
    return client.bulk_put(bucket, files)

def main():
    signal.signal(signal.SIGINT, signal_handler)
    parser = argparse.ArgumentParser(description='DS3 Command Line Interface')
    parser.add_argument('--operation', dest='operation', required=True, type=str, help='What operation to perform', choices=['service_list', 'bucket_list', 'get_object', 'put_object', 'create_bucket', 'delete_bucket', 'delete_object', 'bulk_put', 'bulk_get'])
    parser.add_argument('--bucket', dest='bucket', type=str, help='What bucket to target.  Required for any operations that target a bucket')
    parser.add_argument('--file', dest='target_file', type=str, help='The file to either get or put.  Required for any file specific operations')
    parser.add_argument('--endpoint', dest='endpoint', type=str, help='The DS3 endpoint.  Optionally you can set the environment variable "DS3_ENDPOINT"')
    parser.add_argument('--accessId', dest='access_id', type=str, help='The DS3 access id.  Optionally you can set the environment variable "DS3_ACCESS_KEY"')
    parser.add_argument('--key', dest='key', type=str, help='The DS3 secret key.  Optionally you can set the environment variable "DS3_SECRET_KEY"')
    args = parser.parse_args()

    access_id = os.getenv("DS3_ACCESS_KEY", args.access_id)
    key = os.getenv("DS3_SECRET_KEY", args.key)
    endpoint = os.getenv("DS3_ENDPOINT", args.endpoint)
    proxy = os.getenv("http_proxy", None)
    if not (access_id and key and endpoint):
        print 'Error: accessId and key must both be set'
        sys.exit(1)

    client = ds3.Client(endpoint, ds3.Credentials(access_id, key), proxy)
    if args.operation == 'service_list':
        ds3.pretty_print_xml(client.service_list())
    elif args.operation == 'create_bucket':
        if args.bucket:
            ds3.pretty_print_xml(client.create_bucket(args.bucket))
        else:
            print 'Error: creat_bucket requires a bucket to be specified'
    elif args.operation == 'bucket_list':
        if args.bucket:
            ds3.pretty_print_xml(client.bucket_list(args.bucket))
        else:
            print 'Error: bucket_list requires a bucket to be specified'
    elif args.operation == 'put_object':
        if args.target_file and args.bucket:
            ds3.pretty_print_xml(client.put_object(args.bucket, args.target_file, open(args.target_file)))
        else:
            print 'Error: put_object requires both a file and a bucket to be specified'
    elif args.operation == 'get_object':
        if args.target_file and args.bucket:
            result = client.get_object(args.bucket, args.target_file)
            place_file(args.target_file, result)
        else:
            print 'Error: get_object requires both a file and a bucket to be specified'
    elif args.operation == 'delete_object':
        if args.target_file and args.bucket:
            ds3.pretty_print_xml(client.delete_object(args.bucket, args.target_file))
        else:
            print 'Error: delete_object requires both a file and a bucket to be specified'
    elif args.operation == 'delete_bucket':
        if args.bucket:
            ds3.pretty_print_xml(client.delete_bucket(args.bucket))
        else:
            print 'Error: delete_bucket requires a bucket to be specified'
    elif args.operation == 'bulk_put':
        target_dir = args.target_file
        if not target_dir:
            target_dir = '.'
        if args.bucket:
            ds3.pretty_print_xml(bulk_put(client, args.bucket, target_dir))
        else:
            print 'Error: bulk_put requires a bucket to be specified'
    else:
        print 'Error: Unknown operation (' + str(args.operation) + ')'

if __name__ == '__main__':
    main()
