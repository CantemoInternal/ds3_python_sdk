#!/usr/bin/env python

import os
import os.path
import sys
import signal
import argparse

import ds3

def signal_handler(signal, frame):
    print "Detected Ctrl-C, closing program."
    sys.exit(0)

def ensure_dir_exists(dir_name):
    if not os.path.exists(dir_name):
        os.makedirs(dir_name)

def place_file(file_name, file_data):
    dir_name = os.path.dirname(file_name)
    if dir_name != '':
        ensure_dir_exists(dir_name)
    output_file = open(file_name, 'w')
    output_file.write(file_data)
    output_file.close()

def file_list(directory):
    files = []
    for entry in os.listdir(directory):
        full_path = os.path.join(directory, entry)
        if os.path.isdir(full_path):
            files.append(file_list(full_path))
        elif os.path.isfile(full_path):
            files.append(ds3.ObjectData(full_path))
        else:
            print "Unkown type"
    return files

def bulk_put(client, bucket, directory):
    files = file_list(directory)
    return client.bulk_put(bucket, files)

def print_service_list_result(result):
    print "Service List (Buckets) Result for owner: ", result.owner.ownerid, "(", result.owner.displayname, ")"
    print " "
    
    for bucket in result.get_buckets():
        print "    ", bucket.name, "    ", bucket.creationdate
        
    print ""
    
def print_get_bucket_result(result):
    print "Get Bucket result for", result.name, result.creationdate
    print "Prefix=", result.prefix, "Marker=", result.marker, "MaxKeys=", result.maxkeys
    print "Contents:"
    for c in result.get_contents():
        print "Key=", c.key, "LastModified=", c.lastmodified, "ETag=", c.etag, "Size=", c.size, "StorgeClass=", c.storageclass
  
    
def main():
    signal.signal(signal.SIGINT, signal_handler)
    args = ds3.Arguments()
    
    credentials = ds3.Credentials(args.accessId, args.key)
    if credentials.isValid == False:
        print 'Error: Credentials not valid'
        sys.exit(1)
        
    builder = ds3.ClientBuilder(args.endpoint, credentials)
    client = builder.build()
    
    cmd = args.command
    try:
        if cmd == args.SERVICE_LIST:
            response = client.get_service(ds3.GetServiceRequest())
            print_service_list_result(response.result)
        elif cmd == args.PUT_BUCKET:
            response = client.put_bucket(ds3.PutBucketRequest(args.bucket))
        elif cmd == args.DELETE_BUCKET:
            response = client.delete_bucket(ds3.DeleteBucketRequest(args.bucket))
        elif cmd == args.GET_BUCKET:
            response = client.get_bucket(ds3.GetBucketRequest(args.bucket))
            print_get_bucket_result(response.result)
        elif cmd == args.PUT_OBJECT:
            response = client.put_object(ds3.PutObjectRequest(args.bucket, args.filename, open(args.filename)))
        elif cmd == args.DELETE_OBJECT:
            response = client.delete_object(ds3.DeleteObjectRequest(args.bucket, args.filename))
        elif cmd == args.GET_OBJECT:
            response = client.get_object(args.bucket, args.filename)
        else:
            print "Request", cmd, "is not handled"
            sys.exit(1)
            
    except ds3.RequestFailed as e:
        print "Request", cmd, "failed", e
    except ds3.RequestNotImplemented:
        print "Request", cmd, "is not implemented in the SDK"
    else:
        #print "Request", cmd, "successfully completed"
        response.done()
        
    sys.exit(0)

    """
    elif args.operation == 'bulk_put':
        target_dir = args.target_file
        if not target_dir:
            target_dir = '.'
        if args.bucket:
            ds3.pretty_print_xml(bulk_put(client, args.bucket, target_dir))
        else:
            print 'Error: bulk_put requires a bucket to be specified'
    else:
        print 'Error: Unknown operation (' + str(args.operation) + ')'
"""

if __name__ == '__main__':
    main()
