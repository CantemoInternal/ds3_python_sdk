#!/usr/bin/env python

import os
import os.path
import sys
import signal
import argparse

import ds3dao
import ds3

class ArgumentError(Exception):
    def __init__(self, value):
        self.value = value
        
    def __str__(self):
        return repr(self.value)
    
class Arguments(object):
    def __init__(self):
        
        self.GET_ALL_USERS = 'get_all_users'
        self.GET_USER = 'get_user'
        
        parser = argparse.ArgumentParser(description='DS3 Find User')
        parser.add_argument('--user', dest='user', type=str, help='What user info to retreive or create')
        parser.add_argument('--command', dest='command', required=True, type=str, help='What command to perform', choices=[self.GET_ALL_USERS, self.GET_USER])
        parser.add_argument('--endpoint', dest='endpoint', type=str, help='The DS3 endpoint.  Optionally you can set the environment variable "DS3_ENDPOINT"')
        parser.add_argument('--authid', dest='authid', action='store_true', help='Print AuthId to stdout')
        parser.add_argument('--secretkey', dest='secretkey', action='store_true', help='Print Secret Key to stdout')
        parser.add_argument('--id', dest='id', action='store_true', help='Print Id to stdout')
        parser.add_argument('--all', dest='all', action='store_true', help='Print All User fields with descriptions to stdout')
        parser.add_argument('--quiet', dest='quiet', action='store_true', help='Print Id to stdout')
 
        args = parser.parse_args()

        self.endpoint = os.getenv("DS3_ENDPOINT", args.endpoint)
        self.user = args.user
        self.command = args.command
        self.authid = args.authid
        self.secretkey = args.secretkey
        self.id = args.id
        self.print_all = args.all
        self.quiet = args.quiet
        
        if not self.command:
            raise ArgumentError('must specify user command')
        
        if self.command == self.GET_USER and not self.user:
            raise ArgumentError('must specify user name to get')

def signal_handler(signal, frame):
    print "Detected Ctrl-C, closing program."
    sys.exit(0)

def print_users(result):
    for u in result.get_users():
        print "name", u.name, "auth_id", u.authid, "secret_key", u.secretkey, "id", u.id 
        
def main():
    signal.signal(signal.SIGINT, signal_handler)
    args = Arguments()
        
    client = ds3dao.Client(args.endpoint)
    
    try:
        if args.command == args.GET_ALL_USERS:
            response = client.get_users(ds3dao.GetUsersRequest())
            print_users(response.result)
        elif args.command == args.GET_USER:
            response = client.get_user(ds3dao.GetUserRequest(args.user))
            if args.authid:
                print response.result.authid
            if args.secretkey:
                print response.result.secretkey
            if args.id:
                print response.result.id
            if args.print_all:
                print "Name", response.result.name, "Authid", response.result.authid, "Id", response.result.id, "SecreyKey", response.result.secretkey
            
    except ds3.RequestFailed as e:
        if not args.quiet:
            print "\nRequest failed", e
            print "\nCode: ", e.code
            print "HttpErrorCode: ", e.httperrorcode
            print "Message: ", e.message
        sys.exit(1)
    else:
        if not args.quiet:
            print "\nRequest successfully completed..."
        response.close()
        
    sys.exit(0)

if __name__ == '__main__':
    main()
