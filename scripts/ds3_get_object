#!/usr/bin/env python
"""
This python SDK test program to get an object
"""
import os
import os.path
import sys
import signal
import argparse
from operator import xor

import ds3

class ArgumentError(Exception):
    def __init__(self, value):
        self.value = value
        
    def __str__(self):
        return repr(self.value)
    
class Arguments(object):
    def __init__(self):
        parser = argparse.ArgumentParser(description='List a Bucket')
        parser.add_argument('--bucket', dest='bucket', type=str, help='The bucket name')
        parser.add_argument('--object', dest='object', type=str, help='The Object name')
        parser.add_argument('--startbyte', dest='startbyte', type=str, help='Starting byte in range')
        parser.add_argument('--endbyte', dest='endbyte', type=str, help='Ending byte in range')
        parser.add_argument('--destination', dest='destination', type=str, help='The destination directory')          
        parser.add_argument('--endpoint', dest='endpoint', type=str, help='The DS3 endpoint.  Optionally you can set the environment variable "DS3_ENDPOINT"')
        parser.add_argument('--accessId', dest='accessId', type=str, help='The DS3 access id.  Optionally you can set the environment variable "DS3_ACCESS_KEY"')
        parser.add_argument('--key', dest='key', type=str, help='The DS3 secret key.  Optionally you can set the environment variable "DS3_SECRET_KEY"')

        args = parser.parse_args()
        
        self.accessId = os.getenv("DS3_ACCESS_KEY", args.accessId)
        self.key = os.getenv("DS3_SECRET_KEY", args.key)
        self.endpoint = os.getenv("DS3_ENDPOINT", args.endpoint)
        self.proxy = os.getenv("http_proxy", None)
        self.bucket = args.bucket
        self.object = args.object
        self.destination = args.destination
        self.startbyte = args.startbyte
        self.endbyte = args.endbyte

        if not (self.accessId and self.key and self.endpoint and self.object and self.bucket and self.destination):
            raise ArgumentError('accessId, key, endpoint, object, destination and bucket must all be set')
  
        if xor(bool(self.startbyte), bool(self.endbyte)):
            raise ArgumentError('For a byte range, both startbyte and endbyte must be set')
        
def signal_handler(signal, frame):
    print "Detected Ctrl-C, closing program."
    sys.exit(0)

def ensure_dir_exists(dir_name):
    if not os.path.exists(dir_name):
        os.makedirs(dir_name)

def place_file(file_name, file_data):
    dir_name = os.path.dirname(file_name)
    if dir_name != '':
        ensure_dir_exists(dir_name)
    output_file = open(file_name, 'w')
    output_file.write(file_data)
    output_file.close()
        
def main():
    signal.signal(signal.SIGINT, signal_handler)
    args = Arguments()
    
    credentials = ds3.Credentials(args.accessId, args.key)
    if credentials.is_valid == False:
        print 'Error: Credentials not valid'
        sys.exit(1)
        
    # client handles details of connetion to the DS3 server
    client = ds3.Client(args.endpoint, credentials)
    
    try:
        #create the request to the DS3 server
        request = ds3.GetObjectRequest(args.bucket, args.object)
        
        # add a byte range if requested
        if args.startbyte and args.endbyte:
            request.with_range(args.startbyte, args.endbyte)
            
        # send the request
        response = client.get_object(request)
        
        # write out the returned object
        place_file(os.path.join(os.path.normpath(args.destination), os.path.normpath(args.object)), response.objectdata)
        
        # close the connection for DS3 server
        response.close()
            
    except ds3.RequestFailed as e:
        print "\nGet Object", e
 
        
    sys.exit(0)

if __name__ == '__main__':
    main()
