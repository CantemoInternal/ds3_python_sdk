#!/usr/bin/env python
# Test bulk puts and gets
import os
import os.path
import sys
import signal
import argparse

import ds3

class ArgumentError(Exception):
    def __init__(self, value):
        self.value = value
        
    def __str__(self):
        return repr(self.value)
    
class Arguments(object):
    def __init__(self):
        parser = argparse.ArgumentParser(description='List a Bucket')
        parser.add_argument('--bucket', dest='bucket', type=str, help='The bucket name')
        parser.add_argument('--source', dest='source', type=str, help='The source directory for bulk put')
        parser.add_argument('--destination', dest='destination', type=str, help='The destination directory for bulk get')
        parser.add_argument('--endpoint', dest='endpoint', type=str, help='The DS3 endpoint.  Optionally you can set the environment variable "DS3_ENDPOINT"')
        parser.add_argument('--accessId', dest='accessId', type=str, help='The DS3 access id.  Optionally you can set the environment variable "DS3_ACCESS_KEY"')
        parser.add_argument('--key', dest='key', type=str, help='The DS3 secret key.  Optionally you can set the environment variable "DS3_SECRET_KEY"')

        args = parser.parse_args()
        
        self.accessId = os.getenv("DS3_ACCESS_KEY", args.accessId)
        self.key = os.getenv("DS3_SECRET_KEY", args.key)
        self.endpoint = os.getenv("DS3_ENDPOINT", args.endpoint)
        self.proxy = os.getenv("http_proxy", None)
        self.bucket = args.bucket
        self.source = args.source
        self.destination = args.destination

        if not (self.accessId and self.key and self.endpoint and self.bucket and self.source):
            raise ArgumentError('accessId, key, endpoint, bucket, source directory must all be set')
        

def signal_handler(signal, frame):
    print "Detected Ctrl-C, closing program."
    sys.exit(0)

def ensure_dir_exists(dir_name):
    if not os.path.exists(dir_name):
        os.makedirs(dir_name)

def place_file(file_name, file_data):
    dir_name = os.path.dirname(file_name)
    if dir_name != '':
        ensure_dir_exists(dir_name)
    output_file = open(file_name, 'w')
    output_file.write(file_data)
    output_file.close()


def create_object_list(directory):
    files = []
    for entry in os.listdir(directory):
        full_path = os.path.join(directory, entry)
        if os.path.isdir(full_path):
            files.append(create_object_list(full_path))
        elif os.path.isfile(full_path):
            files.append(ds3.Object(full_path.replace("\\", "/"), os.path.getsize(full_path)))
        else:
            print "Unkown type"
    return files

    
def bulk_put(client, bucket, result):
    print "BULK JOB ID", result.jobid
    for putobj in result.objectlist: 
        try:
            response = client.put_object(ds3.PutObjectRequest(bucket, putobj.name.replace("\\", "/"), open(putobj.name)))
            print "Put", putobj.name, "DONE"
        except ds3.RequestFailed as e:
            print "Put", putobj.name, "FAILED"
    
def bulk_get(client, bucket, dest, result):
    print "BULK GET JOB ID", result.jobid
    for bulkobj in result.objectlist:
        try:
            response = client.get_object(ds3.GetObjectRequest(bucket, bulkobj.name))
            place_file(os.path.join(os.path.normpath(dest), os.path.normpath(bulkobj.name)), response.objectdata)
            print "Get", bulkobj.name, "DONE"
        except ds3.RequestFailed as e:
            print "Get", bulkobj.name, "FAILED"      
        
        
def main():
    signal.signal(signal.SIGINT, signal_handler)
    args = Arguments()
    
    credentials = ds3.Credentials(args.accessId, args.key)
    if credentials.is_valid == False:
        print 'Error: Credentials not valid'
        sys.exit(1)
        
    client = ds3.Client(args.endpoint, credentials)
    
    try:
        #send the request to the DS3 server
        files = create_object_list(args.source)
        response = client.bulk_put(ds3.BulkPutRequest(args.bucket, files))
        bulk_put(ds3.Client(args.endpoint, credentials), args.bucket, response.result)
        
        # if the destination directory was specified, do a get
        if args.destination:
            response = client.bulk_get(ds3.BulkGetRequest(args.bucket, files))
            bulk_get(client, args.bucket, args.destination, response.result)
        
        # close the connection for DS3 server
        response.close()
            
    except ds3.RequestFailed as e:
        print "\nBulk failed ", e
        
        
    sys.exit(0)

if __name__ == '__main__':
    main()
